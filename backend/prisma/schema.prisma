// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  String @id @default(uuid())
  login String @unique
  createdAt DateTime @default(now())
  nickName String
  firstName String
  lastName String
  email String @unique
  score Int
  isOnline Boolean
  isAdmin Boolean
  atoken String @unique
  rtoken String @unique
  twoFA Boolean
  secret String?
  dataUrl String?
  imgUrl String
  n_messages Int
// Oposit Relations:

  photo Photos[]
  channelList JoinChannel[]
  mutedChannel muteUser[]
  adminChannel makeAdmin[]
  winnedMatchs  Match[] @relation(name: "win")
  lostMatchs  Match[] @relation(name: "lost")
  channelMessage ChannelMessage[]
  friends AddFriend[] @relation(name: "friend")
  befriend AddFriend[] @relation(name: "befriend")
  blockedUsers BlockUser[] @relation(name: "blocker")
  blockedFrom BlockUser[] @relation(name: "blocked")
  bannedFrom BanUser[]
  channelsOwned Channel[]
}

model Match {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  winnerScore Int?
  looserScore Int?

// Relations:

  winnerid String?
  looserid String?
  winner User? @relation(name: "win", fields: [winnerid], references: [id])
  looser User? @relation(name: "lost", fields: [looserid], references: [id])
}

model Channel {
  channelName String @id
  createdAt DateTime @default(now())
  updatedAt DateTime?
  is_pwd Boolean
  pwd String?
  isDirect Boolean
  isPrivate Boolean

// Relations: 
  creatorId String
  creator User @relation(fields: [creatorId], references: [id])

// Oposit Relations:

  userList JoinChannel[]
  userAdminList makeAdmin[]
  mutedUserList muteUser[]
  bannedUsers BanUser[]
  messages ChannelMessage[]
}

model makeAdmin {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

// Relations:

  channelId String
  userId String
  channel Channel @relation(fields: [channelId], references: [channelName])
  user User @relation(fields: [userId], references: [login])
  @@unique([channelId, userId])
}

model muteUser {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  duration Int

// Relations:

  channelId String
  userId String
  channel Channel @relation(fields: [channelId], references: [channelName])
  user User @relation(fields: [userId], references: [login])
  @@unique([channelId, userId])
}

model BanUser {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  duration Int

  // Relations:

  channelId String
  userId String
  channel Channel @relation(fields: [channelId], references: [channelName])
  user User @relation(fields: [userId], references: [login])
  @@unique([channelId, userId])
}

model JoinChannel {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

// Relations:

  userId String
  channelId String
  user User @relation(fields: [userId], references: [id])
  channel Channel @relation(fields: [channelId], references: [channelName])
  @@unique([channelId, userId])
}

model ChannelMessage {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  message String
  isRead Boolean

// Relations:

  fromId  String
  channelId String
  from User @relation(fields: [fromId], references: [id])
  channel Channel @relation(fields: [channelId], references: [channelName])
}

model AddFriend {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  isAccepted Boolean

// Relations:
  requesterId String
  requestedId String
  requester User @relation(name: "befriend", fields: [requesterId], references: [id])
  requested User @relation(name: "friend", fields: [requestedId], references: [login])
}

model BlockUser {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

// Relations:
  blockerId String
  blockedId String
  blocker User @relation(name: "blocker", fields: [blockerId], references: [id])
  blocked User @relation(name: "blocked", fields: [blockedId], references: [login])
  @@unique([blockedId, blockerId])
}

model Photos {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  filename String @unique
  path String @unique
  mimetype String
  size Int

// Relations:
  userId String
  user User @relation(fields: [userId], references: [id])
  @@unique([userId, path])
}